# pico_xs

![Build Status](https://github.com/fischer36/pico_xs/actions/workflows/ci.yml/badge.svg)
![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)
![Crates.io](https://img.shields.io/crates/v/pico_xs.svg)

Pico XS is an independent, bare-metal, all-in-one SDK for embedded Rust development on the ARM Cortex-M0+ Raspberry Pi Pico microcontroller. This project offers minimal, low-level access to the hardware features of the microcontroller, providing developers with precise control and the ability to work directly with the hardware.

## Table of Contents
- [üìú License](#-license)
- [üõ†Ô∏è Getting Started](#Ô∏è-getting-started)
  - [Prerequisites](#prerequisites)
  - [Using Pico-XS SDK](#using-pico-xs-sdk)
  - [Running Pico-XS SDK Examples](#running-pico-xs-sdk-examples)
- [üìù Documentation](#-documentation)
  - [Compilation Process](#compilation-process)
- [üó∫Ô∏è Roadmap](#Ô∏è-roadmap)
- [ü§ù Contributing](#-contributing)
- [üìÑ Code of Conduct](#-code-of-conduct)
## üöß Disclaimer 
This project is **in development**, which means it is not ready for library use *yet*. However, you can clone the repository and build it yourself.
## üìú License
The contents of this repository (excluding *boot3.bin*) are licensed under the [Apache License 2.0](LICENSE). See the `LICENSE` file for details. The `boot3.bin` file is licensed under the [BSD-3-Clause License](LICENSE-BSD3). See the `LICENSE-BSD3` file for details.
## üõ†Ô∏è Getting Started
### Prerequisites
Before you begin, ensure you have the following tools and dependencies installed on your system:
1. **ARM Target for Rust**
- Add the ARM Cortex-M0+ target required for the Pico:
```bash
rustup target add thumbv6m-none-eabi
```
2. **`elf2uf2-rs` Utility**
- Install `elf2uf2-rs` to convert ELF binaries to UF2 format, which is necessary for flashing to the Pico:
```bash
cargo install elf2uf2-rs --locked
```
### Using Pico-XS SDK

1. **Include the pico_xs SDK in Your Project**
```bash
cargo add pico_xs
```
2. Compile the Project for the Raspberry Pi Pico Using the ARM Target
```bash
cargo build --release --target thumbv6m-none-eabi
```
3. Convert the Binary to UF2 Format
```bash
elf2uf2-rs target/thumbv6m-none-eabi/release/pico_xs.elf -o pico_xs.uf2
```
4. Flash the UF2 File to the Pico
Simply move the resulting pico_xs.uf2 file to the Pico's USB mass storage device (appears as RPI-RP2 when in bootloader mode).

### Running Pico-XS SDK Examples
1. Clone the Repository
```bash
git clone https://github.com/fischer36/pico_xs
cd pico_xs
```
2. Install elf2uf2-rs
```bash
cargo install elf2uf2-rs --locked
```
3. Build and Run an Example (with Pico in USB Bootloader Mode)
```bash
cargo run --example blinky
```
## üìù Documentation
### Compilation Process
Pico XS is exclusively designed for embedded development on the Raspberry Pi Pico microcontroller, requiring a strict compilation process in accordance with the microcontroller's specifications. Pico XS provides all the necessary compilation steps by default, requiring only the user to set the appropriate target. Here's an overview of the compilation steps:
1. Linker Script
- A linker script (link.ld) is required to match the Pico's memory layout and provide essential boilerplate specifics to the RP2040 chip. This script can be modified as needed to suit specific project requirements.
2. Target Configuration
- The Raspberry Pi Pico uses the thumbv6m-none-eabi architecture. Ensure that the Rust target is set appropriately using Cargo: rustup target add thumbv6m-none-eabi
3. Building the Project
- Compile the project using Cargo with the specified target: cargo build --release --target thumbv6m-none-eabi. This generates optimized binaries in the target/thumbv6m-none-eabi/release/ directory.
4. Converting ELF to UF2 Format
- Use elf2uf2-rs to convert the ELF binary to UF2 format, which is compatible with the Pico's bootloader: elf2uf2-rs target/thumbv6m-none-eabi/release/pico_xs.elf -o pico_xs.uf2
Note: Ensure the input file is the ELF binary (.elf) and specify the desired output UF2 file.
## üó∫Ô∏è Roadmap
---
Develop Custom Stage 2 Bootloader Firmware.

    Publish on Crates.io.


